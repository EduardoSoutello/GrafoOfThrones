#include <stdio.h>
#include <stdlib.h>
#include <string>
#include<iostream>

using namespace std;

struct ListaDeVizinhos
{
	int vertice;
	ListaDeVizinhos* prox;
};

struct Grafo
{
	int TotalVertices;
	struct ListaDeVizinhos** ListaAdj; //Será um vetor do tamanho do numero de vértices
};

struct Grafo* CriarGrafo(int vertices);
void AdicionarAresta(struct Grafo* Grafo, int origem, int destino, int ax);
void MostrarGrafo(struct Grafo* Grafo);
string caso (int x);

int main()
{
	int m = 0; c = 0; b = 0;
	AdicionarAresta(GrafoTeste, 1, 2);
	AdicionarAresta(GrafoTeste, 1, 3);
	AdicionarAresta(GrafoTeste, 3, 4);
	AdicionarAresta(GrafoTeste, 3, 5);
	AdicionarAresta(GrafoTeste, 3, 6);
	AdicionarAresta(GrafoTeste, 3, 7);
	AdicionarAresta(GrafoTeste, 5, 7);
	AdicionarAresta(GrafoTeste, 5, 6);
	AdicionarAresta(GrafoTeste, 7, 8);
	AdicionarAresta(GrafoTeste, 7, 10);
	AdicionarAresta(GrafoTeste, 7, 11);
	AdicionarAresta(GrafoTeste, 8, 9);
	AdicionarAresta(GrafoTeste, 8, 10);
	AdicionarAresta(GrafoTeste, 10, 11);
	AdicionarAresta(GrafoTeste, 10, 8);
	AdicionarAresta(GrafoTeste, 10, 7);
	AdicionarAresta(GrafoTeste, 10, 15);
	AdicionarAresta(GrafoTeste, 11, 12);
	AdicionarAresta(GrafoTeste, 11, 13);
	AdicionarAresta(GrafoTeste, 12, 11);
	AdicionarAresta(GrafoTeste, 12, 13);
	AdicionarAresta(GrafoTeste, 13, 14);
	AdicionarAresta(GrafoTeste, 13, 19);
	AdicionarAresta(GrafoTeste, 14, 13);
	AdicionarAresta(GrafoTeste, 15, 10);
	AdicionarAresta(GrafoTeste, 15, 16);
	AdicionarAresta(GrafoTeste, 15, 17);
	AdicionarAresta(GrafoTeste, 15, 18);
	AdicionarAresta(GrafoTeste, 16, 17);
	AdicionarAresta(GrafoTeste, 16, 21);
	AdicionarAresta(GrafoTeste, 17, 16);
	AdicionarAresta(GrafoTeste, 17, 15);
	AdicionarAresta(GrafoTeste, 17, 18);
	AdicionarAresta(GrafoTeste, 17, 20);
	AdicionarAresta(GrafoTeste, 17, 21);
	AdicionarAresta(GrafoTeste, 18, 15);
	AdicionarAresta(GrafoTeste, 18, 17);
	AdicionarAresta(GrafoTeste, 18, 19);
	AdicionarAresta(GrafoTeste, 18, 20);
	AdicionarAresta(GrafoTeste, 19, 20);
	AdicionarAresta(GrafoTeste, 19, 22);
	AdicionarAresta(GrafoTeste, 20, 17);
	AdicionarAresta(GrafoTeste, 20, 21);
	AdicionarAresta(GrafoTeste, 20, 18);
	AdicionarAresta(GrafoTeste, 20, 22);
	AdicionarAresta(GrafoTeste, 20, 23);
	AdicionarAresta(GrafoTeste, 20, 19);
	AdicionarAresta(GrafoTeste, 21, 16);
	AdicionarAresta(GrafoTeste, 21, 17);
	AdicionarAresta(GrafoTeste, 21, 20);
	AdicionarAresta(GrafoTeste, 21, 24);
	AdicionarAresta(GrafoTeste, 21, 23);
	AdicionarAresta(GrafoTeste, 22, 20);
	AdicionarAresta(GrafoTeste, 22, 23);
	AdicionarAresta(GrafoTeste, 22, 19);
	AdicionarAresta(GrafoTeste, 22, 25);
	AdicionarAresta(GrafoTeste, 23, 20);
	AdicionarAresta(GrafoTeste, 23, 24);
	AdicionarAresta(GrafoTeste, 23, 21);
	AdicionarAresta(GrafoTeste, 23, 25);
	AdicionarAresta(GrafoTeste, 23, 26);
	AdicionarAresta(GrafoTeste, 23, 28);
	AdicionarAresta(GrafoTeste, 24, 23);
	AdicionarAresta(GrafoTeste, 24, 27);
	AdicionarAresta(GrafoTeste, 24, 21);
	AdicionarAresta(GrafoTeste, 24, 26);
	AdicionarAresta(GrafoTeste, 25, 22);
	AdicionarAresta(GrafoTeste, 25, 23);
	AdicionarAresta(GrafoTeste, 25, 28);
	AdicionarAresta(GrafoTeste, 25, 29);
	AdicionarAresta(GrafoTeste, 26, 23);
	AdicionarAresta(GrafoTeste, 26, 24);
	AdicionarAresta(GrafoTeste, 26, 27);
	AdicionarAresta(GrafoTeste, 26, 28);
	AdicionarAresta(GrafoTeste, 26, 30);
	AdicionarAresta(GrafoTeste, 26, 31);
	AdicionarAresta(GrafoTeste, 27, 24);
	AdicionarAresta(GrafoTeste, 27, 26);
	AdicionarAresta(GrafoTeste, 27, 31);
	AdicionarAresta(GrafoTeste, 27, 30);
	AdicionarAresta(GrafoTeste, 28, 29);
	AdicionarAresta(GrafoTeste, 28, 25);
	AdicionarAresta(GrafoTeste, 28, 23);
	AdicionarAresta(GrafoTeste, 28, 26);
	AdicionarAresta(GrafoTeste, 28, 30);
	AdicionarAresta(GrafoTeste, 28, 32);
	AdicionarAresta(GrafoTeste, 29, 28);
	AdicionarAresta(GrafoTeste, 29, 25);
	AdicionarAresta(GrafoTeste, 30, 31);
	AdicionarAresta(GrafoTeste, 30, 26);
	AdicionarAresta(GrafoTeste, 30, 32);
	AdicionarAresta(GrafoTeste, 30, 28);
	AdicionarAresta(GrafoTeste, 31, 30);
	AdicionarAresta(GrafoTeste, 31, 27);
	AdicionarAresta(GrafoTeste, 31, 26);
	AdicionarAresta(GrafoTeste, 32, 30);
	AdicionarAresta(GrafoTeste, 32, 28);
	AdicionarAresta(GrafoTeste, 32, 33);
	AdicionarAresta(GrafoTeste, 32, 34);
	AdicionarAresta(GrafoTeste, 32, 35);
	AdicionarAresta(GrafoTeste, 33, 30);
	AdicionarAresta(GrafoTeste, 33, 32);
	AdicionarAresta(GrafoTeste, 33, 34);
	AdicionarAresta(GrafoTeste, 34, 33);
	AdicionarAresta(GrafoTeste, 34, 32);
	AdicionarAresta(GrafoTeste, 34, 35);
	AdicionarAresta(GrafoTeste, 35, 32);
	AdicionarAresta(GrafoTeste, 35, 34);


	for (int i = 0; i < 38; i++) {
		if (b == 3) {
			printf("\n\n");
			b=0
		}
		string a = caso(i);
		printf("%d", i + i a.c_str());
		b++;
	}
	else{
	MostrarGrafo(GrafoTeste);
	}
	
	system("pause");
	return 0;
}

struct Grafo* CriarGrafo(int TotalVertices)
{
	Grafo* Grafo = (struct Grafo *)malloc(sizeof(struct Grafo));
	Grafo->TotalVertices = TotalVertices;
	Grafo->ListaAdj = (struct ListaDeVizinhos **)malloc(TotalVertices * sizeof(struct ListaDeVizinhos*));

	for (int i = 0; i < TotalVertices; i++)
		Grafo->ListaAdj[i] = NULL;

	return Grafo;
}

void AdicionarAresta(struct Grafo* Grafo, int origem, int ax)
{ //INSERÇÃO NO INICIO DA LISTA 
  // Adiciona uma aresta da origem para o  destino
	struct ListaDeVizinhos* NovoElemento = (struct ListaDeVizinhos *)malloc(sizeof(struct ListaDeVizinhos));
	NovoElemento->vertice = destino;
	NovoElemento->prox = NULL;

	NovoElemento->prox = Grafo->ListaAdj[origem];
	Grafo->ListaAdj[origem] = NovoElemento;

	// Adiciona uma aresta do destino para a origem
	NovoElemento = (struct ListaDeVizinhos *)malloc(sizeof(struct ListaDeVizinhos));
	NovoElemento->vertice = origem;
	NovoElemento->prox = NULL;

	NovoElemento->prox = Grafo->ListaAdj[destino];
	Grafo->ListaAdj[destino] = NovoElemento;
}

void MostrarGrafo(struct Grafo* Grafo)
{
	int v;
	for (v = 0; v < Grafo->TotalVertices; v++)
	{
		struct ListaDeVizinhos* ElementoVarredura = Grafo->ListaAdj[v];
		printf("\n Lista de adjacencias do vertice %d:\n ", v);
		while (ElementoVarredura != NULL)
		{
			printf("%d -> ", ElementoVarredura->vertice);
			ElementoVarredura = ElementoVarredura->prox;
		}
		printf("\n");
	}
}
string ax {
		printf ("Digite o numero desejado: ");
		scanf_s('%d',ax);
switch (string(ax)) {
case 01:
	return Castle black;
	break;
case 02: return Bay of Ice;
	break;
case 03:  return Karhold;
	break;
case 04:  return Winterfell;
	break;
case 05: return The Stony Shore;
	break;
case 06:  return White HArbor;
	break;
case 07:  return Widows Watch;
	break;
case 08: return Funts Finger;
	break;
case 09: return Graywater Watch;
	break;
case 10:  return Moat Calin;
	break;
case 11: return Ironmam Bay;
	break;
case 12:return  Seagard;
	break;
case 13: return The Finger;
	break;
case 14: return Pyke;
	break;
case 15: return The Twins;
	break;
case 16: return The Mountains of the Moon;
	break;
case 17: return RIverrun;
	break;
case 18: return The Eyrie;
	break;
case 19: return Lannsport;
	break;
case 20: return HArrenhal;
	break;
case 21: return Stoney Sept;
	break;
case 22:return  Crackclaw Pont;
	break;
case 23: return Dragontone;
	break;
case 24: return The Golden Sound;
	break;
case 25:  return Searoad MArches;
	break;
case 26:return Kings Landing;
	break;
case 27: return  Blackwater Bay;
	break;
case 28: return Kingswood;
	break;
case 29: return Shiperaker BAy;
	break;
case 30:return Hichgarden;
	break;
case 31: return returnThe reach;
	break;
case 32: return Dornish MArches;
	break;
case 33: return The Boneway;
	break;
case 34: return Storms End;
	break;
case 35: return Oudtown;
	break;
case 36: return Princes Pass;
	break;
case 37: return Three Towers;
	break;

	}
}
